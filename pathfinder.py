
maze_1 = [
    ["X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"],
    ["X", "E", " ", " ", "X", " ", "X", " ", " ", " ", " ", "X", " ", " ", "X"],
    ["X", " ", "X", " ", "X", " ", "X", " ", "X", "X", " ", "X", " ", "X", "X"],
    ["X", " ", "X", " ", "X", " ", "X", " ", "X", "X", " ", "X", " ", "X", "X"],
    ["X", " ", "X", " ", "X", " ", "X", " ", "X", "X", " ", "X", " ", " ", "X"],
    ["X", " ", "X", " ", "X", " ", "X", " ", "X", "X", " ", " ", " ", "X", "X"],
    ["X", " ", "X", " ", "X", " ", " ", " ", " ", " ", " ", "X", " ", " ", "X"],
    ["X", " ", "X", " ", "X", "X", "X", "X", "X", "X", " ", "X", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", " ", " ", "X", " ", "X", "X", " ", "X"],
    ["X", "X", "X", "X", "X", "X", "X", "X", " ", "X", " ", " ", " ", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", "X", " ", " ", " ", "X", "X", "X", "X"],
    ["X", " ", "X", "X", "X", "X", " ", " ", " ", "X", " ", " ", " ", " ", "X"],
    ["X", " ", " ", " ", " ", "X", "X", "X", " ", "X", "X", "X", "X", " ", "X"],
    ["X", " ", "X", "X", " ", " ", 0, "X", " ", " ", " ", " ", " ", " ", "X"],
    ["X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"]
]

maze_2 = [
    ["X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"],
    ["X", "E", " ", " ", "X", " ", "X", " ", " ", " ", " ", "X", " ", " ", "X", " ", "X", " ", " ", "X", " ", "X", " ", " ", "X"],
    ["X", " ", "X", " ", "X", " ", "X", " ", "X", "X", " ", "X", " ", "X", "X", " ", "X", " ", "X", "X", " ", "X", " ", "X", "X"],
    ["X", " ", "X", " ", "X", " ", "X", " ", "X", "X", " ", "X", " ", "X", "X", " ", "X", " ", "X", "X", " ", "X", " ", "X", "X"],
    ["X", " ", "X", " ", "X", " ", "X", " ", "X", "X", " ", "X", " ", " ", " ", " ", "X", " ", "X", "X", " ", "X", " ", " ", "X"],
    ["X", " ", "X", " ", "X", " ", "X", " ", "X", "X", " ", " ", " ", " ", "X", " ", " ", " ", "X", "X", " ", " ", " ", "X", "X"],
    ["X", " ", "X", " ", "X", " ", " ", " ", " ", " ", " ", "X", " ", " ", "X", " ", "X", " ", " ", " ", " ", " ", "X", " ", "X"],
    ["X", " ", "X", " ", "X", "X", "X", "X", "X", "X", " ", "X", "X", " ", "X", " ", "X", "X", "X", "X", "X", " ", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", " ", " ", "X", " ", "X", "X", " ", "X", " ", " ", " ", " ", " ", " ", "X", " ", "X", "X"],
    ["X", "X", "X", "X", "X", "X", "X", "X", " ", "X", " ", " ", " ", " ", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", "X", " ", " ", " ", "X", "X", "X", "X", "X", " ", " ", " ", " ", " ", " ", " ", "X"],
    ["X", " ", "X", "X", "X", "X", " ", " ", " ", "X", " ", " ", " ", " ", " ", " ", " ", "X", "X", "X", "X", "X", "X", "X"],
    ["X", " ", " ", " ", " ", "X", "X", "X", " ", "X", "X", "X", "X", " ", "X", " ", " ", " ", " ", " ", " ", "X", " ", "X"],
    ["X", " ", "X", "X", " ", " ", " ", "X", " ", " ", " ", " ", " ", "X", " ", " ", "X", "X", "X", "X", "X", " ", "X", " ", "X"],
    ["X", " ", " ", " ", " ", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", " ", "X", " ", " ", " ", " ", "X", " ", "X"],
    ["X", " ", "X", "X", "X", "X", " ", " ", " ", " ", "X", " ", " ", " ", "X", "X", " ", " ", "X", "X", " ", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", "X", "X", " ", "X", " ", "X", " ", " ", " ", "X", " ", "X", " ", " ", " ", " ", "X"],
    ["X", "X", "X", "X", "X", "X", " ", " ", "X", " ", "X", " ", "X", "X", "X", " ", "X", " ", " ", " ", "X", " ", "X", "X"],
    ["X", " ", " ", " ", " ", " ", "X", " ", "X", " ", "X", " ", " ", " ", " ", " ", "X", " ", " ", " ", "X", " ", " ", "X"],
    ["X", " ", "X", "X", "X", "X", " ", " ", " ", " ", "X", " ", "X", "X", " ", "X", " ", "X", "X", "X", "X", " ", "X", "X"],
    ["X", " ", " ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "X"],
    ["X", "X", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " ", " ", " ", " ", "X"],
    ["X", 0, "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"],
    ["X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"]]

maze_3 = [
    ["X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"],
    ["X", " ", " ", " ", "X", " ", " ", " ", " ", " ", " ", "X", " ", " ", " ", " ", "X", " ", " ", "X", " ", " ", " ", "E", "X"],
    ["X", " ", "X", " ", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", " ", "X", "X", "X"],
    ["X", " ", "X", " ", " ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " ", "X", " ", "X", " ", " ", " ", " ", " ", " ", "X"],
    ["X", " ", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", " ", "X", "X", "X", " ", "X", "X", "X", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " ", "X", " ", " ", " ", " ", " ", "X", " ", " ", " ", " ", "X"],
    ["X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X"],
    ["X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "X"],
    ["X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "X", " ", "X"],
    ["X", " ", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "X", " ", "X"],
    ["X", " ", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "X"],
    ["X", " ", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"],
    ["X", " ", "X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "X"],
    ["X", " ", "X", " ", "X", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "X", " ", "X"],
    ["X", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"],
    ["X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "X"],
    ["X", " ", "X", "X", "X", " ", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X", "X", "X", "X", "X", "X", "X", "X", " ", "X"],
    ["X", " ", "X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "X"],
    ["X", " ", "X", " ", "X", "X", "X", "X", "X", " ", "X", "X", "X", " ", "X", "X", "X", " ", "X", "X", " ", "X", "X", " ", "X"],
    ["X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", 0, "X"],
    ["X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"]
]

def print_maze(maze):
    max_len = max(len(str(cell)) for row in maze for cell in row)
    
    for row in maze:
        for cell in row:
            cell_str = str(cell)
            padding = ' ' * (max_len - len(cell_str))
            print(cell_str + padding, end=" ")
        print()

def find_path(maze):
    step = 0
    E_found = False

    while E_found == False:
        for y_pos, row in enumerate(maze):
            for x_pos, cell in enumerate(row):
                if cell == step:
                    if maze[y_pos][x_pos - 1] != "X":
                        if maze[y_pos][x_pos - 1] == "E":
                            E_found = True
                        elif maze[y_pos][x_pos - 1] == " ":
                            maze[y_pos][x_pos - 1] = step + 1
                        else:
                            if maze[y_pos][x_pos - 1] > step:
                                maze[y_pos][x_pos - 1] = step + 1
                    if maze[y_pos][x_pos + 1] != "X":
                        if maze[y_pos][x_pos + 1] == "E":
                            E_found = True
                        elif maze[y_pos][x_pos + 1] == " ":
                            maze[y_pos][x_pos + 1] = step + 1
                        else:
                            if maze[y_pos][x_pos + 1] > step:
                                maze[y_pos][x_pos + 1] = step + 1
                    if maze[y_pos + 1][x_pos] != "X":
                        if maze[y_pos + 1][x_pos] == "E":
                            E_found = True
                        elif maze[y_pos + 1][x_pos] == " ":
                            maze[y_pos + 1][x_pos] = step + 1
                        else:
                            if maze[y_pos + 1][x_pos] > step:
                                maze[y_pos + 1][x_pos] = step + 1
                    if maze[y_pos - 1][x_pos] != "X":
                        if maze[y_pos - 1][x_pos] == "E":
                            E_found = True
                        elif maze[y_pos - 1][x_pos] == " ":
                            maze[y_pos - 1][x_pos] = step + 1
                        else:
                            if maze[y_pos - 1][x_pos] > step:
                                maze[y_pos - 1][x_pos] = step + 1
        step = step + 1

    return maze

def clean_maze(maze):
    first_number = -1
    x_E, y_E = -1, -1

    # Find the exit position
    for y_pos, row in enumerate(maze):
        for x_pos, cell in enumerate(row):
            if cell == "E":
                x_E = x_pos
                y_E = y_pos
                break

    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    x_N, y_N = -1, -1

    # Find the starting number adjacent to the exit
    for dx, dy in directions:
        nx, ny = x_E + dx, y_E + dy
        if 0 <= ny < len(maze) and 0 <= nx < len(maze[0]) and isinstance(maze[ny][nx], int):
            if first_number == -1 or maze[ny][nx] < first_number:
                first_number = maze[ny][nx]
                x_N, y_N = nx, ny

    n_number = first_number

    # Trace back the path from the exit to the start
    while n_number != 0:
        maze[y_N][x_N] = str(n_number)
        for dx, dy in directions:
            nx, ny = x_N + dx, y_N + dy
            if 0 <= ny < len(maze) and 0 <= nx < len(maze[0]) and maze[ny][nx] == n_number - 1:
                n_number -= 1
                x_N, y_N = nx, ny
                break

    # Convert remaining numbers to spaces
    for y_pos, row in enumerate(maze):
        for x_pos, cell in enumerate(row):
            if isinstance(cell, int):
                maze[y_pos][x_pos] = " "

    return maze

def main(maze):
    print_maze(maze)
    print_maze(clean_maze(find_path(maze)))


main(maze_1)
